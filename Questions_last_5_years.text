1. Execute the given function.
def differenceofSum(n.m)

The function takes two integrals m and n as arguments.
You are required to obtain the total of all integers ranging between 1 to n (both inclusive) which are not divisible by m.
You must also return the distinction between the sum of integers not divisible by m with the sum of integers divisible by m.

Assumption

m > 0 and n > 0
Sum lies within the integral range
 
Example

Input:
m = 6
n = 30

Output:
285

Integers divisible by 6 are 6, 12, 18, 24, and 30. Their sum is 90.
Integers that are not divisible by 6 are 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, and 29.
Their sum is 375.
The difference between them is 285 (375 – 90).
 
Sample input:
m = 3
n = 10

Sample output:
19
 



2. Execute the given function.
def LargeSmallSum(arr)
The function takes an integral arr which is of the size or length of its arguments. 
Return the sum of the second smallest element at odd position ‘arr’ and the second largest element at the even position.
Assumption
Every array element is unique.
Array is 0 indexed.
Note:
If the array is empty, return 0.
If array length is 3 or <3, return 0.
Example
Input:
Arr: 3 2 1 7 5 4
Output:
7
Explanation
The second largest element at the even position is 3.
The second smallest element at the odd position is 4.
The output is 7 (3 + 4).



3. Write a function to validate if the provided two strings are anagrams or not.
If the two strings are anagrams, then return ‘yes’. Otherwise, return ‘no’.
Input:
Input 1: 1st string
Input 2: 2nd string
Output:
(If they are anagrams, the function will return ‘yes’. Otherwise, it will return ‘no’.)
Example
Input 1: Listen
Input 2: Silent
Output:
Yes


4. Perform the following function. 
def Productsmallpair(sum,arr)
This function accepts the integers sum and arr.
It is used to find the arr(j) and arr(k), 
where k ! = j. arr(j) and arr(k) should be the smallest elements in the array.
Keep this in mind:

If n<2 or empty, return –1.
If these pairs are not found, then return to zero.
Make sure all the values are within the integer range.
 
Example
Input:
Sum: 9
Arr: 5 4 2 3 9 1 7
Output:
2
Explanation
From the array of integers, we have to select the two smallest numbers, 
i.e 2 and 1. Sum of these two (2 + 1) = 3. This is less than 9 (3 < 9).
The product of these two is 2 (2 x 1 = 2) Hence the output is integer 2.
Sample input:
Sum: 4
Arr: 9 8 –7 3 9 3
Sample output:
–21






5. Perform the function for the given purpose.
For writing numbers, there is a system called N-base notation. 
This system uses only N-based symbols. It uses symbols that are listed as the first n symbols.
Decimal and n-based notations are 0:0, 1:1, 2:2, …, 10:A, 11:B, …, 35:Z.
Perform the function: Chats DectoNBase(int n, int num)
This function only uses positive integers. Use a positive integer n and num to find out the n-base that is equal to num.
Steps

Select a decimal number and divide it by n. Consider this as an integer division.
Denote the remainder as n-based notation.
Again divide the quotient by n.
Repeat the above steps until you get a 0 remainder.
The remainders from last to first are the n-base values.
 
Assumption
1 < n < = 36
Example
Input:
N: 12
Num: 718
Output:
4BA
Explanation
num	Divisor	Quotient	Remainder
718	12	59	10(A)
59	2	4	11(B)
4	12	0	4(4)
Sample input:
N: 21
Num: 5678
Sample output:
CI8
